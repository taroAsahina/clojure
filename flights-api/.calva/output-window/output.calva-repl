; This is the Calva REPL Window.
; It's just a file, really, with some special treatment from Calva.
; Use it as a REPL input prompt if you like. (When the REPL is connected.)
; TIPS: The keyboard shortcut `ctrl+alt+o r` shows and focuses this window
; Please see https://calva.io/repl-window/ for more info.
; Happy coding! ♥️

; TIPS: As with any Clojure file when the REPL is connected:
; - `alt+enter` evaluates the current top level form.
; - `ctrl+enter` evaluates the current form.
; Special for this file:
; - `alt+up` and `alt+down` traverse up and down the REPL command history
;    when the cursor is after the last contents at the prompt
; 
; See also the Calva Inspector: https://calva.io/inspector/

PLEASE NOTE
We will update the default location of this file.
The new default location will be
  "<projectRootPath>/.calva/repl.calva-repl"
For now the legacy path is used by default.
To give yourself a smooth transition, you can opt in
to the change, by configuring this setting as false:
  "calva.useLegacyReplWindowPath"
and then add "**/.calva/repl.calva-repl" to your ".gitignore" file.


This file is configured as the output destination for all REPL output.
You can configure this with the setting:
  "calva.outputDestinations"


; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in: (cd /home/user1/practice/clojure/flights-api; lein update-in :dependencies conj '[nrepl,"1.3.1"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.55.4"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +dev repl :headless)
; Using host:port 127.0.0.1:41385 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
"Please see https://calva.io/output/#about-stdout-in-the-repl-window
about why stdout printed to this file is prepended with `;` to be line comments."
clj꞉user꞉> 
; Jack-in done.
clj꞉user꞉> 
(dev)
:loaded
clj꞉dev꞉> 
:loaded
:loaded
clj꞉dev꞉> 
(go)
; Execution error (ExceptionInfo) at integrant.core/missing-refs-exception (core.cljc:191).
; Missing definitions for refs: :flights-api.handler.systems/ping, :flights-api.handler.special-offer/get-special-offers
clj꞉dev꞉> 
(go)
; Execution error (ExceptionInfo) at integrant.core/missing-refs-exception (core.cljc:191).
; Missing definitions for refs: :flights-api.handler.systems/ping, :flights-api.handler.special-offer/get-special-offers
clj꞉dev꞉> 
(go)
; Execution error (ExceptionInfo) at integrant.core/missing-refs-exception (core.cljc:191).
; Missing definitions for refs: :flights-api.handler.systems/ping, :flights-api.handler.special-offer/get-special-offers
clj꞉dev꞉> 
(go)
; Execution error (ExceptionInfo) at integrant.core/missing-refs-exception (core.cljc:191).
; Missing definitions for refs: :flights-api.handler.flights-api.handler.v1.systems/ping, :flights-api.handler.flights-api.handler.v1/special-offers
clj꞉dev꞉> 
(go)
; Execution error (IllegalArgumentException) at integrant.core/try-build-action (core.cljc:292).
; No method in multimethod 'init-key' for dispatch value: :flights-api.handler.v1/special-offers
clj꞉dev꞉> 
(go)
; Execution error (IllegalArgumentException) at integrant.core/try-build-action (core.cljc:292).
; No method in multimethod 'init-key' for dispatch value: :flights-api.handler.v1/special-offers
clj꞉dev꞉> 
(go)
; Execution error (IllegalArgumentException) at integrant.core/try-build-action (core.cljc:292).
; No method in multimethod 'init-key' for dispatch value: :flights-api.handler.v1.special-offer/get-special-offers
clj꞉dev꞉> 
(go)
; Execution error (IllegalArgumentException) at integrant.core/try-build-action (core.cljc:292).
; No method in multimethod 'init-key' for dispatch value: :flights-api.handler.v1.special-offer/get-special-offers
clj꞉dev꞉> 
; Evaluating file: special_offer.clj
#multifn[init-key 0x5b90991c]
clj꞉flights-api.handler.v1.special-offer꞉> 
(dev)
; Syntax error compiling at (.calva/output-window/output.calva-repl:92:1).
; Unable to resolve symbol: dev in this context
clj꞉flights-api.handler.v1.special-offer꞉> 
; nREPL Connection was closed
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in: (cd /home/user1/practice/clojure/flights-api; lein update-in :dependencies conj '[nrepl,"1.3.1"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.55.4"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +dev repl :headless)
; Using host:port 127.0.0.1:44839 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
; Jack-in done.
clj꞉user꞉> 
(dev)
:loaded
clj꞉dev꞉> 
(go)
; :duct.server.http.jetty/starting-server {:port 3000}
:initiated
clj꞉dev꞉> 
#'flights-api.handler.v1.special-offer/get-special-offers
clj꞉flights-api.handler.v1.special-offer꞉> (dev)
; Syntax error compiling at (.calva/output-window/output.calva-repl:120:44).
; Unable to resolve symbol: dev in this context
clj꞉flights-api.handler.v1.special-offer꞉> 
; nREPL Connection was closed
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in: (cd /home/user1/practice/clojure/flights-api; lein update-in :dependencies conj '[nrepl,"1.3.1"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.55.4"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +dev repl :headless)
; Using host:port 127.0.0.1:46755 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
; Jack-in done.
clj꞉user꞉> 
(dev)
:loaded
clj꞉dev꞉> 
(go)
; :duct.server.http.jetty/starting-server {:port 3000}
:initiated
clj꞉dev꞉> 
(reset)
; :reloading (flights-api.handler.v1.systems flights-api.use-case.special-offer flights-api.handler.v1.special-offer dev flights-api.main user)
:resumed
clj꞉dev꞉> 
; "o" nil ", locale" nil ", currency" nil
; "o" nil ", locale" nil ", currency" nil
(reset)
; :reloading (flights-api.handler.v1.special-offer)
:resumed
clj꞉dev꞉> 
; "o" nil ", locale" nil ", currency" nil


(reset)
; :reloading (flights-api.handler.v1.special-offer)
:resumed
clj꞉dev꞉> 
(reset)
; :reloading (flights-api.handler.v1.special-offer)
:resumed
clj꞉dev꞉> 
; "o" nil ", locale" nil ", currency" nil
; "o" nil ", locale" nil ", currency" nil
(reset)
; :reloading (flights-api.handler.v1.special-offer)
:resumed
clj꞉dev꞉> 
; "--- Request received ---"
; "Full request map keys:" (:ssl-client-cert :protocol :remote-addr :params :route-params :headers :server-port :muuntaja/request :ataraxy/result :content-length :form-params :query-params :content-type :character-encoding :uri :server-name :query-string :muuntaja/response :body :scheme :request-method)
; "Request query-params:" {"origin" "NRT", "locale" "ja_JP", "currency" "JPY"}
; "Extracted with string keys: o" "NRT" ", locale" "ja_JP" ", currency" "JPY"
; "--- Request received ---"
; "Full request map keys:" (:ssl-client-cert :protocol :remote-addr :params :route-params :headers :server-port :muuntaja/request :ataraxy/result :content-length :form-params :query-params :content-type :character-encoding :uri :server-name :query-string :muuntaja/response :body :scheme :request-method)
; "Request query-params:" {"origin" "NRT", "locale" "ja_JP", "currency" "JPY"}
; "Extracted with string keys: o" "NRT" ", locale" "ja_JP" ", currency" "JPY"
(reset)
; :reloading (flights-api.use-case.special-offer flights-api.handler.v1.special-offer)
:resumed
clj꞉dev꞉> 
; "--- Request received ---"
; "Full request map keys:" (:ssl-client-cert :protocol :remote-addr :params :route-params :headers :server-port :muuntaja/request :ataraxy/result :content-length :form-params :query-params :content-type :character-encoding :uri :server-name :query-string :muuntaja/response :body :scheme :request-method)
; "Request query-params:" {"origin" "NRT", "locale" "ja_JP", "currency" "JPY"}
; "Extracted with string keys: o" "NRT" ", locale" "ja_JP" ", currency" "JPY"
(reset)
; :reloading (flights-api.handler.v1.special-offer)
:resumed
clj꞉dev꞉> 

; o nil , locale nil , currency nil
(reset)
; :reloading (flights-api.handler.v1.special-offer)
:resumed
clj꞉dev꞉> 
; "--- Request received ---"
; "Full request map keys:" (:ssl-client-cert :protocol :remote-addr :params :route-params :headers :server-port :muuntaja/request :ataraxy/result :content-length :form-params :query-params :content-type :character-encoding :uri :server-name :query-string :muuntaja/response :body :scheme :request-method)
; "Request query-params:" {"origin" "NRT", "locale" "ja_JP", "currency" "JPY"}
; "Extracted with string keys: o" "NRT" ", locale" "ja_JP" ", currency" "JPY"
(reset)
; :reloading (flights-api.handler.v1.special-offer)
:resumed
clj꞉dev꞉> 
; nREPL Connection was closed
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in: (cd /home/user1/practice/clojure/flights-api; lein update-in :dependencies conj '[nrepl,"1.3.1"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.55.4"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +dev repl :headless)
; Using host:port 127.0.0.1:38229 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
; Jack-in done.
clj꞉user꞉> (dev)
:loaded
clj꞉dev꞉> 
(go)
; :duct.server.http.jetty/starting-server {:port 3000}
:initiated
clj꞉dev꞉> 
; "Destructured query params: origin=" nil ", locale=" nil ", currency=" nil
(reset)
; :reloading (flights-api.handler.v1.systems flights-api.use-case.special-offer flights-api.handler.v1.special-offer dev flights-api.main user)
:resumed
clj꞉dev꞉> 
; {"origin" "jpn"}
; "Destructured query params: origin=" nil ", locale=" nil ", currency=" nil
; {"origin" "jpn", "locale" "ja", "currency" "jpn"}
; "Destructured query params: origin=" nil ", locale=" nil ", currency=" nil
(reset)
; :reloading (flights-api.handler.v1.special-offer)
:resumed
clj꞉dev꞉> 
; {"origin" "jpn", "locale" "ja", "currency" "jpn"}
; "Destructured query params: origin=" "jpn" ", locale=" "ja" ", currency=" "jpn"
; {"origin" "jpn", "locale" "ja"}
; "Destructured query params: origin=" "jpn" ", locale=" "ja" ", currency=" nil
; {"origin" "jpn", "locale" "ja", "cu" "aa"}
; "Destructured query params: origin=" "jpn" ", locale=" "ja" ", currency=" nil
